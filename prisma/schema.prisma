// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "./node_modules/@prisma/client"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml/schema.dbml"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs/prisma-docs"
  language = "es"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // Load URL from environment variables
}

// --- Core Models ---

model Product {
  id                String   @id @default(cuid())
  name              String
  description       String?  @db.Text
  barcode           String?  @unique
  currentStock      Float    @default(0)
  minimumStock      Float?   @default(0)
  maximumStock      Float?
  categoryId        String
  brandId           String?
  images            Json? // Array of image URLs or paths stored as JSON
  unitOfMeasure     String // e.g., unit, kg, lt, box
  costPrice         Float
  sellingPrice      Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isActive          Boolean  @default(true)
  isFeatured        Boolean? @default(false)
  tags              String?  @db.Text // Comma-separated keywords
  isPromotionActive Boolean? @default(false)
  promotionId       String? // Optional relation to Promotions (if model exists)
  weight            Float?
  dimensions        String? // e.g., "10x20x30 cm"
  sku               String?  @unique // Stock Keeping Unit
  variants          Json? // JSON for variants (color, size, etc.) or model separately

  category              Category            @relation(fields: [categoryId], references: [id])
  brand                 Brand?              @relation(fields: [brandId], references: [id])
  saleDetails           SaleDetail[]
  inventoryHistory      InventoryMovement[]
  purchaseOrderItems    PurchaseOrderItem[]
  relatedProductsSource ProductRelation[]   @relation("ProductSource")
  relatedProductsTarget ProductRelation[]   @relation("ProductTarget")
  locations             ProductLocation[] // Relation to physical locations
  // promotion       Promotion?        @relation(fields: [promotionId], references: [id]) // If Promotion model is created

  @@index([name])
  @@index([tags(length: 255)]) // <-- FIX 1: Added length for TEXT index
  @@index([sku])
  @@map("products") // Explicit table name mapping (optional but good practice)
}

model Category {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?  @db.Text
  imageUrl        String?
  slug            String?  @unique
  parentId        String?
  displayOrder    Int?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  metaTitle       String? // For SEO
  metaDescription String?  @db.Text // For SEO
  keywords        String?  @db.Text // For SEO and internal search

  products       Product[]
  parentCategory Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories  Category[] @relation("CategoryHierarchy")

  @@index([name])
  @@index([slug])
  @@map("categories")
}

model Brand {
  id               String   @id @default(cuid())
  name             String   @unique
  slug             String?  @unique
  shortDescription String?  @db.Text
  logoUrl          String?
  websiteUrl       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isActive         Boolean  @default(true)
  internalNotes    String?  @db.Text
  displayOrder     Int?
  metaTitle        String? // For SEO
  metaDescription  String?  @db.Text // For SEO

  products            Product[]
  suppliers           SupplierBrand[] // Many-to-many with Suppliers
  substituteBrands    BrandRelation[] @relation("BrandSource")
  substitutedByBrands BrandRelation[] @relation("BrandTarget")
  // priceLists      PriceList[] // If PriceList model is created

  @@index([name])
  @@index([slug])
  @@map("brands")
}

model Sale {
  id             String     @id @default(cuid())
  saleTimestamp  DateTime   @default(now())
  customerId     String?
  subtotal       Float
  taxDetails     Json? // JSON for tax breakdown { "VAT": 16.50, "EXCISE": 5.20 }
  totalAmount    Float
  paymentMethod  String // e.g., CASH, CREDIT_CARD, TRANSFER
  status         SaleStatus @default(COMPLETED) // COMPLETED, VOIDED, PENDING
  userId         String // Cashier/User who made the sale
  invoiceNumber  String?    @unique
  discountAmount Float?     @default(0) // Total discount value for the sale
  notes          String?    @db.Text

  customer    Customer?    @relation(fields: [customerId], references: [id])
  user        User         @relation("UserSales", fields: [userId], references: [id]) // <-- FIX 2: Added relation name
  saleDetails SaleDetail[]
  returns     Return[] // Relation to returns/refunds

  @@index([saleTimestamp])
  @@index([userId])
  @@index([customerId])
  @@map("sales")
}

model SaleDetail {
  id                 String @id @default(cuid())
  saleId             String
  productId          String
  quantity           Float
  unitPrice          Float // Price at the time of sale
  itemDiscountAmount Float? @default(0) // Discount value for this item
  itemTaxDetails     Json? // Specific taxes for this item if applicable
  itemSubtotal       Float // quantity * unitPrice
  itemTotal          Float // itemSubtotal - itemDiscountAmount + taxes (calculated)

  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade) // Delete details if sale is deleted
  product Product @relation(fields: [productId], references: [id]) // Don't delete product if detail is deleted

  @@index([saleId])
  @@index([productId])
  @@map("sale_details")
}

model Return {
  id                String   @id @default(cuid())
  originalSaleId    String
  returnTimestamp   DateTime @default(now())
  returnedItems     Json // JSON: [{ "productId": "xyz", "quantity": 2 }, ...]
  reason            String?  @db.Text
  refundedAmount    Float
  processedByUserId String

  originalSale    Sale @relation(fields: [originalSaleId], references: [id])
  processedByUser User @relation("UserReturns", fields: [processedByUserId], references: [id]) // <-- FIX 3: Added relation name

  @@index([originalSaleId])
  @@index([returnTimestamp])
  @@map("returns")
}

model Customer {
  id               String   @id @default(cuid())
  fullName         String
  phoneNumber      String?
  email            String?  @unique
  address          String?  @db.Text
  customerType     String? // REGULAR, FREQUENT, WHOLESALE
  loyaltyPoints    Int?     @default(0)
  accountBalance   Float?   @default(0)
  registrationDate DateTime @default(now())
  isActive         Boolean  @default(true)

  sales Sale[] // Purchase history

  @@index([fullName])
  @@index([email])
  @@index([phoneNumber])
  @@map("customers")
}

model Supplier {
  id            String   @id @default(cuid())
  name          String   @unique
  phoneNumber   String?
  email         String?  @unique
  address       String?  @db.Text
  contactPerson String?
  paymentTerms  String?  @db.Text
  createdAt     DateTime @default(now())
  isActive      Boolean  @default(true)

  purchaseOrders PurchaseOrder[]
  brands         SupplierBrand[] // Many-to-many with Brands

  @@index([name])
  @@map("suppliers")
}

model PurchaseOrder {
  id           String              @id @default(cuid())
  supplierId   String
  orderDate    DateTime            @default(now())
  status       PurchaseOrderStatus @default(PENDING) // PENDING, SHIPPED, PARTIALLY_RECEIVED, FULLY_RECEIVED, CANCELLED
  receivedDate DateTime?
  totalAmount  Float? // Calculated or entered

  supplier           Supplier            @relation(fields: [supplierId], references: [id])
  createdByUserId     String
  items              PurchaseOrderItem[]
  inventoryMovements InventoryMovement[] // Movements associated with receiving items

  @@index([orderDate])
  @@index([supplierId])
  @@index([status])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id               String @id @default(cuid())
  purchaseOrderId  String
  productId        String
  quantityOrdered  Float
  quantityReceived Float? @default(0)
  unitCostPrice    Float

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])

  @@index([purchaseOrderId])
  @@index([productId])
  @@map("purchase_order_items")
}

model InventoryMovement {
  id               String       @id @default(cuid())
  productId        String
  timestamp        DateTime     @default(now())
  movementType     MovementType // PURCHASE_ENTRY, SALE_EXIT, POSITIVE_ADJUSTMENT, NEGATIVE_ADJUSTMENT, CUSTOMER_RETURN, SUPPLIER_RETURN, TRANSFER_OUT, TRANSFER_IN, INITIAL_STOCK
  quantity         Float // Positive for inflow, negative for outflow
  adjustmentReason String?      @db.Text // Only for ADJUSTMENT types
  userId           String // User performing the movement
  saleId           String? // Reference to Sale if SALE_EXIT
  purchaseOrderId  String? // Reference to PurchaseOrder if PURCHASE_ENTRY
  returnId         String? // Reference to Return if applicable

  product       Product        @relation(fields: [productId], references: [id])
  user          User           @relation(fields: [userId], references: [id]) // Note: This relation to User is unnamed, assuming it's the primary one.
  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  // sale            Sale?             @relation(fields: [saleId], references: [id]) // Prisma limitation on multiple optional relations, handle in logic
  // return          Return?           @relation(fields: [returnId], references: [id]) // Ditto

  @@index([productId])
  @@index([timestamp])
  @@index([movementType])
  @@map("inventory_movements")
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  passwordHash String // Store hashed password
  fullName     String
  role         UserRole  @default(CASHIER) // ADMIN, MANAGER, CASHIER, INVENTORY_MANAGER
  isActive     Boolean   @default(true)
  lastLogin    DateTime? // Add this field
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  salesMade          Sale[]              @relation("UserSales") // Explicit relation name needed if User is referenced multiple times in Sale/Return
  returnsProcessed   Return[]            @relation("UserReturns") // Explicit relation name
  inventoryMovements InventoryMovement[] // This is the opposite side of the unnamed relation in InventoryMovement
  activityLogs       ActivityLog[]

  @@index([username])
  @@index([role])
  @@map("users")
}

model ActivityLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  userId    String
  action    String // e.g., LOGIN, LOGOUT, CREATE_PRODUCT, UPDATE_SALE
  details   Json? // Additional action details

  user User @relation(fields: [userId], references: [id])

  @@index([timestamp])
  @@index([userId])
  @@index([action])
  @@map("activity_logs")
}

model StoreConfig {
  id                   String  @id @default("main") // Use a fixed ID for the single config row
  storeName            String
  address              String? @db.Text
  taxInfo              String? @db.Text // Tax ID, Legal Name, etc.
  taxConfig            Json? // { "VAT": 16.0, "EXCISE_RATE_8": 8.0 }
  activePaymentMethods Json? // ["CASH", "CREDIT_CARD", "TRANSFER"]
  discountConfig       Json?
  unitsOfMeasure       Json? // ["unit", "kg", "lt", "box", "m"]
  logoUrl              String?
  currencyCode         String  @default("MXN") // Currency symbol or code

  @@map("store_config")
}

// --- Join/Relation Tables ---

model SupplierBrand {
  supplierId String
  brandId    String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  brand      Brand    @relation(fields: [brandId], references: [id])

  @@id([supplierId, brandId])
  @@map("supplier_brands")
}

model BrandRelation {
  sourceBrandId String
  targetBrandId String
  sourceBrand   Brand  @relation("BrandSource", fields: [sourceBrandId], references: [id])
  targetBrand   Brand  @relation("BrandTarget", fields: [targetBrandId], references: [id])

  @@id([sourceBrandId, targetBrandId])
  @@map("brand_relations")
}

model ProductRelation {
  sourceProductId String
  targetProductId String
  relationType    String? // e.g., COMPLEMENTARY, SIMILAR
  sourceProduct   Product @relation("ProductSource", fields: [sourceProductId], references: [id])
  targetProduct   Product @relation("ProductTarget", fields: [targetProductId], references: [id])

  @@id([sourceProductId, targetProductId])
  @@map("product_relations")
}

// --- Physical Location (Optional) ---

model Location {
  id          String  @id @default(cuid())
  name        String  @unique // "Main Warehouse - Shelf A1"
  type        String // WAREHOUSE, SALES_FLOOR, OTHER
  description String? @db.Text
  capacity    Float?
  coordinates String?
  isActive    Boolean @default(true)

  productsAtLocation ProductLocation[]

  @@index([name])
  @@index([type])
  @@map("locations")
}

model ProductLocation {
  productId          String
  locationId         String
  quantityAtLocation Float  @default(0)

  product  Product  @relation(fields: [productId], references: [id])
  location Location @relation(fields: [locationId], references: [id])

  @@id([productId, locationId])
  @@index([locationId])
  @@map("product_locations")
}

// --- Enums ---

enum SaleStatus {
  PENDING
  COMPLETED
  VOIDED // Changed from ANULADA

  @@map("sale_statuses") // Optional mapping
}

enum PurchaseOrderStatus {
  PENDING
  SHIPPED
  PARTIALLY_RECEIVED
  FULLY_RECEIVED
  CANCELLED

  @@map("purchase_order_statuses") // Optional mapping
}

enum MovementType {
  PURCHASE_ENTRY // ENTRADA_COMPRA
  SALE_EXIT // SALIDA_VENTA
  POSITIVE_ADJUSTMENT // AJUSTE_POSITIVO
  NEGATIVE_ADJUSTMENT // AJUSTE_NEGATIVO
  CUSTOMER_RETURN // DEVOLUCION_CLIENTE
  SUPPLIER_RETURN // DEVOLUCION_PROVEEDOR
  TRANSFER_OUT // TRANSFERENCIA_SALIDA
  TRANSFER_IN // TRANSFERENCIA_ENTRADA
  INITIAL_STOCK // INICIAL

  @@map("movement_types") // Optional mapping
}

enum UserRole {
  ADMIN
  MANAGER // GERENTE
  CASHIER // CAJERO
  INVENTORY_MANAGER // INVENTARIO
  REPORTS_VIEWER // Nuevo rol para solo ver reportes
  SALES_MANAGER // GESTION_VENTAS
  GUEST

  @@map("user_roles") // Optional mapping
}
